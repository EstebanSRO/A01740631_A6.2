# -*- coding: utf-8 -*-
"""Test hotel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OMUnNxTtMvwMHYTUFm4QMjbv_Tpk-EI-

**INSTITUTO TECNOLÓGICO Y DE ESTUDIOS SUPERIORES DE MONTERREY CAMPUS EDUCACIÓN DIGITAL**

**ASIGNATURA:**
PRUEBAS DE SOFTWARE Y ASEGURAMIENTO DE LA CALIDAD

**ACTIVIDAD 6.2:**
EJERCICIO DE PROGRAMACIÓN 3 Y PRUEBAS DE UNIDAD - TEST HOTEL

**ESTUDIANTE:**
ESTEBAN SÁNCHEZ RETAMOZA A01740631

**EQUIPO DOCENTE:**
DR. GERARDO PADILLA ZÁRATE PROFESOR TITULAR &
MTRA. YETNALEZI QUINTAS RUIZ PROFESOR ASISTENTE

**Pylint**
"""

!pip install pylint

!pylint hotel.py

"""**Flake8**"""

!pip install flake8

!flake8 hotel.py

"""**Coverage**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile test_gestion_hoteles.py
# import unittest
# from unittest.mock import patch
# from hotel import Hotel, create_hotel, delete_hotel, display_hotel_info, modify_hotel_info, reserve_room, cancel_reservation
# 
# 
# class TestHotelManagement(unittest.TestCase):
# 
#     def setUp(self):
#         self.hotels_data = {
#             'H200': {
#                 'name': 'Hotel Esteban',
#                 'rooms': {
#                     '101': {'is_reserved': False, 'customer_id': None},
#                     '102': {'is_reserved': True, 'customer_id': 'Cliente2'}
#                 }
#             }
#         }
# 
#     def test_create_hotel(self):
#         with patch('builtins.input', side_effect=['H300', 'Hotel Nuevo', '2']), patch('builtins.print'):
#             create_hotel(self.hotels_data)
#             self.assertIn('H300', self.hotels_data)
#             self.assertEqual(self.hotels_data['H300']['name'], 'Hotel Nuevo')
#             self.assertEqual(len(self.hotels_data['H300']['rooms']), 2)
# 
#     def test_delete_hotel(self):
#         with patch('builtins.input', return_value='H200'), patch('builtins.print'):
#             delete_hotel(self.hotels_data)
#             self.assertNotIn('H200', self.hotels_data)
# 
#     def test_delete_nonexistent_hotel(self):
#         with patch('builtins.input', return_value='H999'), patch('builtins.print') as mock_print:
#             delete_hotel(self.hotels_data)
#             mock_print.assert_any_call("No se encontró ningún hotel con ID 'H999'.\n")  # Asegúrate de incluir el '\n'
# 
#     def test_display_hotel_info(self):
#         with patch('builtins.input', return_value='H200'), patch('builtins.print') as mock_print:
#             display_hotel_info(self.hotels_data)
#             mock_print.assert_called()
# 
#     def test_modify_hotel_info(self):
#         with patch('builtins.input', side_effect=['H200', 'Hotel Renovado']), patch('builtins.print'):
#             modify_hotel_info(self.hotels_data)
#             self.assertEqual(self.hotels_data['H200']['name'], 'Hotel Renovado')
# 
#     def test_reserve_room(self):
#         with patch('builtins.input', side_effect=['H200', '101', 'Cliente1']), patch('builtins.print'):
#             reserve_room(self.hotels_data)
#             self.assertTrue(self.hotels_data['H200']['rooms']['101']['is_reserved'])
#             self.assertEqual(self.hotels_data['H200']['rooms']['101']['customer_id'], 'Cliente1')
# 
#     def test_cancel_reservation(self):
#         with patch('builtins.input', side_effect=['H200', '102']), patch('builtins.print'):
#             cancel_reservation(self.hotels_data)
#             self.assertFalse(self.hotels_data['H200']['rooms']['102']['is_reserved'])
#             self.assertIsNone(self.hotels_data['H200']['rooms']['102']['customer_id'])
# 
#     def test_to_dict(self):
#         hotel = Hotel('H100', 'Hotel Test', {'201': {'is_reserved': False, 'customer_id': None}})
#         expected_dict = {'name': 'Hotel Test', 'rooms': {'201': {'is_reserved': False, 'customer_id': None}}}
#         self.assertEqual(hotel.to_dict(), expected_dict)
# 
#     def test_hotel_creation(self):
#         hotel = Hotel('H101', 'Hotel Creation Test', {'301': {'is_reserved': False, 'customer_id': None}})
#         self.assertEqual(hotel.hotel_id, 'H101')
#         self.assertEqual(hotel.name, 'Hotel Creation Test')
#         self.assertEqual(hotel.rooms, {'301': {'is_reserved': False, 'customer_id': None}})
# 
# if __name__ == '__main__':
#     unittest.main()

pip install coverage

!coverage run test_gestion_hoteles.py

!coverage report