# -*- coding: utf-8 -*-
"""Copia de Customer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ez9GjoOYgz2aWvC024HQAd-MpxTZVN5

**INSTITUTO TECNOLÓGICO Y DE ESTUDIOS SUPERIORES DE MONTERREY CAMPUS EDUCACIÓN DIGITAL**

**ASIGNATURA:**
PRUEBAS DE SOFTWARE Y ASEGURAMIENTO DE LA CALIDAD

**ACTIVIDAD 6.2:**
EJERCICIO DE PROGRAMACIÓN 3 Y PRUEBAS DE UNIDAD - CUSTOMER

**ESTUDIANTE:**
ESTEBAN SÁNCHEZ RETAMOZA A01740631

**EQUIPO DOCENTE:**
DR. GERARDO PADILLA ZÁRATE PROFESOR TITULAR &
MTRA. YETNALEZI QUINTAS RUIZ PROFESOR ASISTENTE

**Pylint**
"""

!pip install pylint

!pylint customer.py

"""**Flake8**"""

!pip install flake8

!flake8 customer.py

"""**coverage**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile testcustomer.py
# import unittest
# from unittest.mock import patch, MagicMock
# import json
# import customer  # Asegúrate de que esta línea coincida con el nombre de tu archivo Python real
# 
# class TestCustomerManager(unittest.TestCase):
#     # Diccionario de prueba definido como un atributo de clase
#     test_customers_data = {
#         "1": {"name": "Juan Perez", "email": "juan@example.com"},
#         "2": {"name": "María López", "email": "maria@example.com"}
#     }
# 
#     def setUp(self):
#         # Cliente de prueba para verificar la creación y manipulación
#         self.test_customer_id = "3"
#         self.test_customer = {"name": "Test User", "email": "test@example.com"}
# 
#     @patch('customer.files.download')
#     @patch('builtins.open', new_callable=MagicMock)
#     def test_create_customer(self, mock_file_open, mock_download):
#         # Simula inputs para la creación de un cliente
#         with patch('builtins.input', side_effect=[self.test_customer_id, self.test_customer['name'], self.test_customer['email']]):
#             customer.create_customer(self.test_customers_data)
#             self.assertIn(self.test_customer_id, self.test_customers_data)
#             self.assertEqual(self.test_customers_data[self.test_customer_id], self.test_customer)
# 
#     @patch('customer.files.download')
#     def test_delete_customer_positive(self, mock_download):
#         # Asegura que un cliente existente puede ser eliminado
#         with patch('builtins.input', return_value="1"):
#             customer.delete_customer(self.test_customers_data)
#             self.assertNotIn("1", self.test_customers_data)
# 
#     @patch('customer.files.download')
#     def test_delete_customer_negative(self, mock_download):
#         # Intenta eliminar un cliente que no existe y verifica que los datos no cambian
#         original_data = self.test_customers_data.copy()
#         with patch('builtins.input', return_value="9999"):  # ID inexistente
#             customer.delete_customer(self.test_customers_data)
#             self.assertEqual(self.test_customers_data, original_data)
# 
#     @patch('builtins.print')
#     def test_display_customer_info_positive(self, mock_print):
#         # Muestra la información de un cliente existente
#         with patch('builtins.input', return_value="2"):
#             customer.display_customer_info(self.test_customers_data)
#             mock_print.assert_called()
# 
#     @patch('builtins.print')
#     def test_display_customer_info_negative(self, mock_print):
#         # Intenta mostrar la información de un cliente que no existe
#         with patch('builtins.input', return_value="9999"):  # ID inexistente
#             customer.display_customer_info(self.test_customers_data)
#             mock_print.assert_called_with("No se encontró ningún cliente con ID '9999'.\n")
# 
#     @patch('customer.files.download')
#     def test_modify_customer_info_positive(self, mock_download):
#         # Modifica la información de un cliente existente
#         new_name = "Updated Name"
#         new_email = "updated@example.com"
#         with patch('builtins.input', side_effect=["2", new_name, new_email]):
#             customer.modify_customer_info(self.test_customers_data)
#             self.assertEqual(self.test_customers_data["2"]["name"], new_name)
#             self.assertEqual(self.test_customers_data["2"]["email"], new_email)
# 
# if __name__ == '__main__':
#     unittest.main()

pip install coverage

!coverage run testcustomer.py