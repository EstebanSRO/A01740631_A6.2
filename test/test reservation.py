# -*- coding: utf-8 -*-
"""Copia de RESERVATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pbe57KzSE5zT2ov8I5FFwCaTfKc_j15J

**INSTITUTO TECNOLÓGICO Y DE ESTUDIOS SUPERIORES DE MONTERREY CAMPUS EDUCACIÓN DIGITAL**

**ASIGNATURA:**
PRUEBAS DE SOFTWARE Y ASEGURAMIENTO DE LA CALIDAD

**ACTIVIDAD 6.2:**
EJERCICIO DE PROGRAMACIÓN 3 Y PRUEBAS DE UNIDAD - RESERVATION

**ESTUDIANTE:**
ESTEBAN SÁNCHEZ RETAMOZA A01740631

**EQUIPO DOCENTE:**
DR. GERARDO PADILLA ZÁRATE PROFESOR TITULAR &
MTRA. YETNALEZI QUINTAS RUIZ PROFESOR ASISTENTE

**Pylint**
"""

!pip install pylint

!pylint reservation.py

"""**Flake8**"""

!pip install flake8

!flake8 reservation.py

"""**coverage**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile testreservation.py
# import unittest
# from reservation import Hotel, create_reservation, cancel_reservation
# 
# 
# class TestHotelReservation(unittest.TestCase):
#     def setUp(self):
#         # Datos de ejemplo para el hotel
#         self.hotel_data = {
#             "hotel_id": 123,
#             "name": "Hotel Test",
#             "rooms": {
#                 "101": {"is_reserved": False, "customer_id": None},
#                 "102": {"is_reserved": False, "customer_id": None},
#                 "103": {"is_reserved": False, "customer_id": None}
#             }
#         }
#         # Instancia del hotel para cada prueba
#         self.hotel = Hotel(self.hotel_data)
# 
#     def test_create_reservation_success(self):
#         create_reservation(self.hotel, "101", "customer123")
#         self.assertTrue(self.hotel.rooms["101"]["is_reserved"])
#         self.assertEqual(self.hotel.rooms["101"]["customer_id"], "customer123")
# 
#     def test_create_reservation_room_already_reserved(self):
#         create_reservation(self.hotel, "101", "customer123")
#         create_reservation(self.hotel, "101", "customer456")
#         self.assertTrue(self.hotel.rooms["101"]["is_reserved"])
#         self.assertEqual(self.hotel.rooms["101"]["customer_id"], "customer123")
# 
#     def test_create_reservation_room_not_exists(self):
#         create_reservation(self.hotel, "104", "customer123")
#         self.assertFalse(self.hotel.rooms.get("104"))
# 
#     def test_cancel_reservation_success(self):
#         create_reservation(self.hotel, "103", "customer123")
#         cancel_reservation(self.hotel, "103")
#         self.assertFalse(self.hotel.rooms["103"]["is_reserved"])
#         self.assertIsNone(self.hotel.rooms["103"]["customer_id"])
# 
#     def test_cancel_reservation_room_not_reserved(self):
#         cancel_reservation(self.hotel, "101")
#         self.assertFalse(self.hotel.rooms["101"]["is_reserved"])
#         self.assertIsNone(self.hotel.rooms["101"]["customer_id"])
# 
#     def test_cancel_reservation_room_not_exists(self):
#         cancel_reservation(self.hotel, "104")
#         self.assertFalse(self.hotel.rooms.get("104"))
# 
# 
# if __name__ == '__main__':
#     unittest.main()
#

pip install coverage

!coverage run testreservation.py

!coverage report

