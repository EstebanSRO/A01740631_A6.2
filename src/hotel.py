# -*- coding: utf-8 -*-
"""hotel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EBGpPMGIPXS4t7dfw2qY0SiXYbMU85nz

**INSTITUTO TECNOLÓGICO Y DE ESTUDIOS SUPERIORES DE MONTERREY CAMPUS EDUCACIÓN DIGITAL**

**ASIGNATURA:**
PRUEBAS DE SOFTWARE Y ASEGURAMIENTO DE LA CALIDAD

**ACTIVIDAD 6.2:**
EJERCICIO DE PROGRAMACIÓN 3 Y PRUEBAS DE UNIDAD - HOTEL

**ESTUDIANTE:**
ESTEBAN SÁNCHEZ RETAMOZA A01740631

**EQUIPO DOCENTE:**
DR. GERARDO PADILLA ZÁRATE PROFESOR TITULAR &
MTRA. YETNALEZI QUINTAS RUIZ PROFESOR ASISTENTE

**Hotel**
"""

"""
Gestionador de Hoteles.
"""

import json
import time
from google.colab import files


class Hotel:
    """Representa un hotel: detalles y habitaciones."""

    def __init__(self, hotel_id, name, rooms):
        self.hotel_id = hotel_id
        self.name = name
        self.rooms = rooms

    def to_dict(self):
        """Convierte los detalles del hotel a un diccionario."""
        return {"name": self.name, "rooms": self.rooms}

    def save_to_file(self, filename='hotels.json'):
        """Guarda la info actualizada en un archivo JSON y lo descarga."""
        with open(filename, 'w', encoding='utf-8') as file:
            json.dump({self.hotel_id: self.to_dict()}, file, indent=4)
        files.download(filename)  # Descarga el archivo actualizado

    def display_info(self):
        """Imprime la información en la consola."""
        print(f"Detalles del Hotel '{self.name}' (ID: {self.hotel_id}):")
        print("Habitaciones:")
        for room_number, details in self.rooms.items():
            reser_s = "Reservada" if details["is_reserved"] else "Disponible"
            custinf = (f" por Cliente ID: {details['customer_id']}"
                       if details["customer_id"] else "")
            print(f"  Habitación {room_number}: {reser_s}{custinf}")
        print("\n")


def upload_file():
    """Solicita al usuario que cargue un archivo y devuelve el contenido."""
    uploaded = files.upload()
    if uploaded:
        file_name = next(iter(uploaded))
        print(f"\nArchivo '{file_name}' cargado con éxito.\n")
        return json.loads(uploaded[file_name].decode('utf-8'))
    print("\nNo se cargó ningún archivo.\n")
    return {}


def create_hotel(hotels_data):
    """Crea un nuevo hotel."""
    print("Creación de un nuevo hotel:")
    hotel_id = input("Ingrese el ID del hotel: ")
    name = input("Ingrese el nombre del hotel: ")
    num_rooms = int(input("Ingrese el número de habitaciones del hotel: "))
    default_room = {"is_reserved": False, "customer_id": None}
    rooms = {str(i): default_room.copy() for i in range(1, num_rooms + 1)}
    hotels_data[hotel_id] = {"name": name, "rooms": rooms}
    print(f"Hotel '{name}' creado con éxito.\n")


def delete_hotel(hotels_data):
    """Elimina un hotel."""
    print("Eliminación de un hotel:")
    hotel_id = input("Ingrese el ID del hotel que desea eliminar: ")
    if hotel_id in hotels_data:
        del hotels_data[hotel_id]
        print(f"Hotel '{hotel_id}' eliminado con éxito.\n")
    else:
        print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")


def display_hotel_info(hotels_data):
    """Muestra la información de un hotel."""
    print("Visualización de la información de un hotel:")
    hotel_id = input("Ingrese el ID del hotel que desea visualizar: ")
    if hotel_id in hotels_data:
        hotel_info = hotels_data[hotel_id]
        hotel = Hotel(hotel_id, hotel_info["name"], hotel_info["rooms"])
        hotel.display_info()
    else:
        print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")


def modify_hotel_info(hotels_data):
    """Modifica la información de un hotel."""
    print("Modificación de la información de un hotel:")
    hotel_id = input("Ingrese el ID del hotel que desea modificar: ")
    if hotel_id in hotels_data:
        hotel_info = hotels_data[hotel_id]
        name = input("Ingrese el nuevo nombre del hotel: ")
        hotel_info["name"] = name
        print(f"Información del hotel '{hotel_id}' modificada con éxito.\n")
    else:
        print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")


def reserve_room(hotels_data):
    """Reserva una habitación en un hotel."""
    print("Reservación de una habitación en un hotel:")
    hotel_id = input("Ingrese el ID del hotel: ")
    room_number = input("Ingrese el número de habitación que desea reservar: ")
    if hotel_id in hotels_data:
        hotel_info = hotels_data[hotel_id]
        rooms = hotel_info.get("rooms", {})
        if room_number in rooms:
            rooms[room_number]["is_reserved"] = True
            rooms[room_number]["customer_id"] = input("Nombre(ID) de cliente:")
            print(f"Habitación '{room_number}' reservada con éxito.\n")
        else:
            print(f"No existe '{room_number}' en el hotel '{hotel_id}'.\n")
    else:
        print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")


def cancel_reservation(hotels_data):
    """Cancela la reservación de una habitación en un hotel."""
    print("Cancelación de una reservación de habitación en un hotel:")
    hotel_id = input("Ingrese el ID del hotel: ")
    room_number = input("Número de habitación a cancelar: ")
    if hotel_id in hotels_data:
        hotel_info = hotels_data[hotel_id]
        rooms = hotel_info.get("rooms", {})
        if room_number in rooms:
            rooms[room_number]["is_reserved"] = False
            rooms[room_number]["customer_id"] = None
            print(f"Reservación de la habitación '{room_number}' cancelada.\n")
        else:
            print(f"No existe '{room_number}' en el hotel '{hotel_id}'.\n")
    else:
        print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")


def main():
    """Flujo principal de ejecución para gestionar hoteles."""
    start_time = time.time()

    # Cargar información inicial de hoteles si existe
    hotels_data = upload_file()  # Solicita al usuario cargar el archivo

    while True:
        print("Hoteles")
        print("a. Crear Hotel")
        print("b. Eliminar Hotel")
        print("c. Mostrar Información del Hotel")
        print("d. Modificar Información del Hotel")
        print("e. Reservar Habitación")
        print("f. Cancelar Reservación")
        print("x. Salir")

        choice = input("Seleccione una opción: ").lower()

        if choice == 'a':
            create_hotel(hotels_data)
        elif choice == 'b':
            delete_hotel(hotels_data)
        elif choice == 'c':
            display_hotel_info(hotels_data)
        elif choice == 'd':
            modify_hotel_info(hotels_data)
        elif choice == 'e':
            reserve_room(hotels_data)
        elif choice == 'f':
            cancel_reservation(hotels_data)
        elif choice == 'x':
            print("Saliendo del programa.")
            break
        else:
            print("Opción no válida, seleccione una opción válida.\n")

    # Guardar información actualizada de hoteles
    if hotels_data:
        with open('hotels.json', 'w', encoding='utf-8') as file:
            json.dump(hotels_data, file, indent=4)
        files.download('hotels.json')  # Descarga el archivo actualizado

    # Imprimir información de los hoteles
    print("\nInformación de los hoteles:")
    for hotel_id, hotel_info in hotels_data.items():
        hotel = Hotel(hotel_id, hotel_info["name"], hotel_info["rooms"])
        hotel.display_info()

    end_time = time.time()
    print(f"Tiempo de ejecución: {end_time - start_time:.2f} segundos.\n")


if __name__ == "__main__":
    main()

"""**Convertirlo en .py**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile hotel.py
# """
# Gestionador de Hoteles.
# """
# 
# import json
# import time
# from google.colab import files
# 
# 
# class Hotel:
#     """Representa un hotel: detalles y habitaciones."""
# 
#     def __init__(self, hotel_id, name, rooms):
#         self.hotel_id = hotel_id
#         self.name = name
#         self.rooms = rooms
# 
#     def to_dict(self):
#         """Convierte los detalles del hotel a un diccionario."""
#         return {"name": self.name, "rooms": self.rooms}
# 
#     def save_to_file(self, filename='hotels.json'):
#         """Guarda la info actualizada en un archivo JSON y lo descarga."""
#         with open(filename, 'w', encoding='utf-8') as file:
#             json.dump({self.hotel_id: self.to_dict()}, file, indent=4)
#         files.download(filename)  # Descarga el archivo actualizado
# 
#     def display_info(self):
#         """Imprime la información en la consola."""
#         print(f"Detalles del Hotel '{self.name}' (ID: {self.hotel_id}):")
#         print("Habitaciones:")
#         for room_number, details in self.rooms.items():
#             reser_s = "Reservada" if details["is_reserved"] else "Disponible"
#             custinf = (f" por Cliente ID: {details['customer_id']}"
#                        if details["customer_id"] else "")
#             print(f"  Habitación {room_number}: {reser_s}{custinf}")
#         print("\n")
# 
# 
# def upload_file():
#     """Solicita al usuario que cargue un archivo y devuelve el contenido."""
#     uploaded = files.upload()
#     if uploaded:
#         file_name = next(iter(uploaded))
#         print(f"\nArchivo '{file_name}' cargado con éxito.\n")
#         return json.loads(uploaded[file_name].decode('utf-8'))
#     print("\nNo se cargó ningún archivo.\n")
#     return {}
# 
# 
# def create_hotel(hotels_data):
#     """Crea un nuevo hotel."""
#     print("Creación de un nuevo hotel:")
#     hotel_id = input("Ingrese el ID del hotel: ")
#     name = input("Ingrese el nombre del hotel: ")
#     num_rooms = int(input("Ingrese el número de habitaciones del hotel: "))
#     default_room = {"is_reserved": False, "customer_id": None}
#     rooms = {str(i): default_room.copy() for i in range(1, num_rooms + 1)}
#     hotels_data[hotel_id] = {"name": name, "rooms": rooms}
#     print(f"Hotel '{name}' creado con éxito.\n")
# 
# 
# def delete_hotel(hotels_data):
#     """Elimina un hotel."""
#     print("Eliminación de un hotel:")
#     hotel_id = input("Ingrese el ID del hotel que desea eliminar: ")
#     if hotel_id in hotels_data:
#         del hotels_data[hotel_id]
#         print(f"Hotel '{hotel_id}' eliminado con éxito.\n")
#     else:
#         print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")
# 
# 
# def display_hotel_info(hotels_data):
#     """Muestra la información de un hotel."""
#     print("Visualización de la información de un hotel:")
#     hotel_id = input("Ingrese el ID del hotel que desea visualizar: ")
#     if hotel_id in hotels_data:
#         hotel_info = hotels_data[hotel_id]
#         hotel = Hotel(hotel_id, hotel_info["name"], hotel_info["rooms"])
#         hotel.display_info()
#     else:
#         print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")
# 
# 
# def modify_hotel_info(hotels_data):
#     """Modifica la información de un hotel."""
#     print("Modificación de la información de un hotel:")
#     hotel_id = input("Ingrese el ID del hotel que desea modificar: ")
#     if hotel_id in hotels_data:
#         hotel_info = hotels_data[hotel_id]
#         name = input("Ingrese el nuevo nombre del hotel: ")
#         hotel_info["name"] = name
#         print(f"Información del hotel '{hotel_id}' modificada con éxito.\n")
#     else:
#         print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")
# 
# 
# def reserve_room(hotels_data):
#     """Reserva una habitación en un hotel."""
#     print("Reservación de una habitación en un hotel:")
#     hotel_id = input("Ingrese el ID del hotel: ")
#     room_number = input("Ingrese el número de habitación que desea reservar: ")
#     if hotel_id in hotels_data:
#         hotel_info = hotels_data[hotel_id]
#         rooms = hotel_info.get("rooms", {})
#         if room_number in rooms:
#             rooms[room_number]["is_reserved"] = True
#             rooms[room_number]["customer_id"] = input("Nombre(ID) de cliente:")
#             print(f"Habitación '{room_number}' reservada con éxito.\n")
#         else:
#             print(f"No existe '{room_number}' en el hotel '{hotel_id}'.\n")
#     else:
#         print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")
# 
# 
# def cancel_reservation(hotels_data):
#     """Cancela la reservación de una habitación en un hotel."""
#     print("Cancelación de una reservación de habitación en un hotel:")
#     hotel_id = input("Ingrese el ID del hotel: ")
#     room_number = input("Número de habitación a cancelar: ")
#     if hotel_id in hotels_data:
#         hotel_info = hotels_data[hotel_id]
#         rooms = hotel_info.get("rooms", {})
#         if room_number in rooms:
#             rooms[room_number]["is_reserved"] = False
#             rooms[room_number]["customer_id"] = None
#             print(f"Reservación de la habitación '{room_number}' cancelada.\n")
#         else:
#             print(f"No existe '{room_number}' en el hotel '{hotel_id}'.\n")
#     else:
#         print(f"No se encontró ningún hotel con ID '{hotel_id}'.\n")
# 
# 
# def main():
#     """Flujo principal de ejecución para gestionar hoteles."""
#     start_time = time.time()
# 
#     # Cargar información inicial de hoteles si existe
#     hotels_data = upload_file()  # Solicita al usuario cargar el archivo
# 
#     while True:
#         print("Hoteles")
#         print("a. Crear Hotel")
#         print("b. Eliminar Hotel")
#         print("c. Mostrar Información del Hotel")
#         print("d. Modificar Información del Hotel")
#         print("e. Reservar Habitación")
#         print("f. Cancelar Reservación")
#         print("x. Salir")
# 
#         choice = input("Seleccione una opción: ").lower()
# 
#         if choice == 'a':
#             create_hotel(hotels_data)
#         elif choice == 'b':
#             delete_hotel(hotels_data)
#         elif choice == 'c':
#             display_hotel_info(hotels_data)
#         elif choice == 'd':
#             modify_hotel_info(hotels_data)
#         elif choice == 'e':
#             reserve_room(hotels_data)
#         elif choice == 'f':
#             cancel_reservation(hotels_data)
#         elif choice == 'x':
#             print("Saliendo del programa.")
#             break
#         else:
#             print("Opción no válida, seleccione una opción válida.\n")
# 
#     # Guardar información actualizada de hoteles
#     if hotels_data:
#         with open('hotels.json', 'w', encoding='utf-8') as file:
#             json.dump(hotels_data, file, indent=4)
#         files.download('hotels.json')  # Descarga el archivo actualizado
# 
#     # Imprimir información de los hoteles
#     print("\nInformación de los hoteles:")
#     for hotel_id, hotel_info in hotels_data.items():
#         hotel = Hotel(hotel_id, hotel_info["name"], hotel_info["rooms"])
#         hotel.display_info()
# 
#     end_time = time.time()
#     print(f"Tiempo de ejecución: {end_time - start_time:.2f} segundos.\n")
# 
# 
# if __name__ == "__main__":
#     main()

"""**Pylint**"""

!pip install pylint

!pylint hotel.py

"""**Flake8**"""

!pip install flake8

!flake8 hotel.py